{"version":3,"sources":["webpack://ld2h/webpack/bootstrap","webpack://ld2h/external \"$rdf\"","webpack://ld2h/./node_modules/rdfgraphnode-rdfext/js/GraphNode.js","webpack://ld2h/./node_modules/rdf2h/src/vocab.js","webpack://ld2h/./node_modules/mustache/mustache.js","webpack://ld2h/external \"fetch\"","webpack://ld2h/./node_modules/rdf2h/src/rdf2h.js","webpack://ld2h/external \"$\"","webpack://ld2h/./src/ld2h.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$rdf","fetch","Headers","h","window","GraphNode","Impl","arguments","[object Object]","nodes","graph","sources","this","_graph","Array","isArray","Error","node","length","termType","indexOf","split","Promise","resolve","uri","rdfFetch","then","response","f","results","map","all","predicate","each","statementsMatching","undefined","statement","subject","options","login","ggg","init","headers","set","ok","reject","mediaType","text","parse","error","plainFetch","status","console","log","schema","suffix","sym","rdf","rdfs","foaf","rdf2h","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","mustache","objectToString","toString","isFunction","escapeRegExp","string","replace","hasProperty","obj","propName","regExpTest","RegExp","test","nonSpaceRe","isWhitespace","re","testRegExp","entityMap","&","<",">","\"","'","/","`","=","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","Scanner","tail","pos","Context","view","parentContext","cache",".","parent","Writer","eos","scan","match","index","substring","scanUntil","search","push","lookup","names","context","lookupHit","clearCache","template","tags","tokens","openingTagRe","closingTagRe","closingCurlyRe","sections","spaces","hasTag","nonSpace","stripSpace","pop","compileTags","tagsToCompile","start","type","chr","token","openSection","scanner","valueLength","charAt","nestedTokens","collector","numTokens","nestTokens","lastToken","squashedTokens","squashTokens","parseTemplate","render","partials","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","j","slice","escape","version","defaultWriter","TypeError","to_html","send","result","String","nodeName","apply","Mustache","vocab","RDF2h","rendererGraphs","tbox","env","origLokup","Renderee","graphNode","resolvePath","path","pathSections","readingURI","lastCharLess","section","nextSection","splitPathSection","resolveSubPath","subNode","endsWith","in","resolveCurie","startsWith","out","resultNodes","language","equals","literal","datatype","prefixPart","splits","iriPart","prefix","iri","prefixMap","subContext","nodePath","resolvedNodes","warn","getRenderer","renderee","types","sort","a","b","localeCompare","concat","renderer","reverseGraphs","reverse","reduce","find","getMatchingRenderer","join","rendererRenderer","js","output","print","returnValue","Function","err","message","stackLines","stack","lineWithSelf","findIndex","splice","curie","$","LD2h","setHtmlContent","content","tmp","document","createElement","innerHTML","head","getElementsByTagName","body","html","expand","canonicalize","url","div","firstChild","href","getRenderersGraph","renderers","getDataGraph","localData","expandWithRenderers","elems","resultPromises","removeClass","elem","attr","relativeURI","currentElem","processsNextElem","graphUri","relativeGraphURI","catch","data","rendered","dataElem","serializedRDF","serializationFormat","location","renderersElem","renderersTtl","rendererLinks","graphPromises","iteration"],"mappings":"qBACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,mBClFAhC,EAAAD,QAAAkC,sBCAA,IAAAA,EAAApC,EAAA,GACAqC,EAAArC,EAAA,GAYA,IAAAsC,EAAA,CAAAC,MAAAC,OAAAF,QAAA,CAAAD,EAAAC,SAEA,SAAAG,IACA,WAAAA,EAAAC,QAAAC,WAGAF,EAAAC,WAEAE,YAAAC,EAAAC,EAAAC,GACAC,KAAAC,OAAAH,EACAI,MAAAC,QAAAN,GACAG,KAAAH,QAKAG,KAAAH,UAEAG,KAAAD,UAGAD,YACA,IAAAE,KAAAC,OACA,MAAAG,MAAA,uEAEA,OAAAJ,KAAAC,OAGAI,WACA,OAAAL,KAAAH,MAAAS,OACA,MAAAF,MAAA,+DAEA,OAAAJ,KAAAH,MAAA,GAGAU,eACA,OAAAP,KAAAK,KAAAE,SAGAlC,YACA,OAAA2B,KAAAK,KAAAhC,MAGAuB,QACA,iBAAAI,KAAAO,UACAP,KAAAD,SAAAC,KAAAD,QAAAS,QAAAR,KAAA3B,MAAAoC,MAAA,YACA,OAAAC,QAAAC,QAAAX,MAGA,IAAAY,EAAAZ,KAAA3B,MAAAoC,MAAA,QACA,OAAAhB,EAAAoB,SAAAD,GAAAE,KAAAC,KAAAjB,SAAAgB,KAAAhB,GAAAL,EAAAO,KAAAK,KAAAP,GAAAc,KASAhB,KAAAoB,GACA,IAAAC,EAAAjB,KAAAH,MAAAqB,IAAAb,GAAAW,EAAAvB,GAAAY,GAAAL,KAAAF,MAAAE,KAAAD,WACA,OAAAW,QAAAS,IAAAF,GAGArB,UAAAoB,GACA,IAAAC,EAAAjB,KAAAH,MAAAqB,IAAAb,GAAAZ,GAAAY,GAAAL,KAAAF,MAAAE,KAAAD,SAAAV,QAAAyB,KAAAE,IACA,OAAAN,QAAAS,IAAAF,GAMArB,QACA,OAAAI,KAAAH,MAAAqB,IAAAb,GAAAZ,GAAAY,GAAAL,KAAAF,MAAAE,KAAAD,UAGAH,IAAAwB,GAKA,OAAA3B,EAJAO,KAAAF,MAAAuB,KAAArB,KAAAK,KAAAe,GAIApB,KAAAF,MAAAE,KAAAD,SAGAH,GAAAwB,GAKA,OAAA3B,EAJAO,KAAAF,MAAAwB,wBAAAC,EAAAH,EAAApB,KAAAK,MAIAa,IAAAM,KAAAC,SAAAzB,KAAAF,MAAAE,KAAAD,WAeAN,EAAAoB,SAAA,SAAAD,EAAAc,EAAAC,GA8BA,IAAAC,EAAA5B,KACA,OA9BA,SAAAY,EAAAiB,MAQA,OAPAA,EAAAC,UACAD,EAAAC,QAAA,IAAAxC,GAEAuC,EAAAC,QAAA7D,IAAA,WACA4D,EAAAC,QAAAC,IAAA,sHAGA1C,EAAAuB,EAAAiB,GAAAf,KAAAC,GACAA,EAAAiB,IACAjB,EAAAjB,MAAA,SAAAY,QAAA,CAAAC,EAAAsB,KACA,IAAAnC,EAAAV,EAAAU,QACAoC,EAAAnB,EAAAe,QAAA7D,IAAA,gBAAAwC,MAAA,KAAiF,GACjF,OAAAM,EAAAoB,OAAArB,KAAAqB,IACA/C,EAAAgD,MAAAD,EAAArC,EAAAc,EAAAsB,EAAA,CAAAG,EAAAvC,KACAuC,EACAJ,EAAAI,GAEA1B,EAAAb,UAKAiB,GAEAA,GAKAuB,CAAA1B,EAAAc,GAAAZ,KAAA,SAAAC,GACA,OAAAA,EAAAwB,OAAA,IACAxB,EAEAY,GAAA,MAAAZ,EAAAwB,QACAC,QAAAC,IAAA,yCACAd,IAAAb,KAAA,WACA,OAAAc,EAAAf,SAAAD,EAAAc,MAGAX,KAMA5D,EAAAD,QAAAuC,mBCpKA,IAAAL,EAAApC,EAAA,GAEAG,EAAAD,SACAwF,OAAA,SAAAC,GACA,OAAAvD,EAAAwD,IAAA,qBAAAD,IAEAE,IAAA,SAAAF,GACA,OAAAvD,EAAAwD,IAAA,8CAAAD,IAEAG,KAAA,SAAAH,GACA,OAAAvD,EAAAwD,IAAA,wCAAAD,IAEAI,KAAA,SAAAJ,GACA,OAAAvD,EAAAwD,IAAA,6BAAAD,IAEAK,MAAA,SAAAL,GACA,OAAAvD,EAAAwD,IAAA,qCAAAD,sBChBA,IAAAM,EAAAC,EAAAC,EAOAC;;;;;;;;;AAAAA,EASC,SAAAC,GAED,IAAAC,EAAAxF,OAAAkB,UAAAuE,SACApD,EAAAD,MAAAC,SAAA,SAAArB,GACA,yBAAAwE,EAAA/F,KAAAuB,IAGA,SAAA0E,EAAA1E,GACA,yBAAAA,EAWA,SAAA2E,EAAAC,GACA,OAAAA,EAAAC,QAAA,8BAAoC,QAOpC,SAAAC,EAAAC,EAAAC,GACA,aAAAD,GAAA,iBAAAA,GAAAC,KAAAD,EAKA,IAAAE,EAAAC,OAAAhF,UAAAiF,KAKA,IAAAC,EAAA,KACA,SAAAC,EAAAT,GACA,OANA,SAAAU,EAAAV,GACA,OAAAK,EAAAxG,KAAA6G,EAAAV,GAKAW,CAAAH,EAAAR,GAGA,IAAAY,GACAC,IAAA,QACAC,IAAA,OACAC,IAAA,OACAC,IAAA,SACAC,IAAA,QACAC,IAAA,SACAC,IAAA,SACAC,IAAA,UASA,IAAAC,EAAA,MACAC,EAAA,MACAC,EAAA,OACAC,EAAA,QACAC,EAAA,qBAsNA,SAAAC,EAAA1B,GACA1D,KAAA0D,SACA1D,KAAAqF,KAAA3B,EACA1D,KAAAsF,IAAA,EAyDA,SAAAC,EAAAC,EAAAC,GACAzF,KAAAwF,OACAxF,KAAA0F,OAAkBC,IAAA3F,KAAAwF,MAClBxF,KAAA4F,OAAAH,EAwEA,SAAAI,IACA7F,KAAA0F,SA/HAN,EAAApG,UAAA8G,IAAA,WACA,WAAA9F,KAAAqF,MAOAD,EAAApG,UAAA+G,KAAA,SAAA3B,GACA,IAAA4B,EAAAhG,KAAAqF,KAAAW,MAAA5B,GAEA,IAAA4B,GAAA,IAAAA,EAAAC,MACA,SAEA,IAAAvC,EAAAsC,EAAA,GAKA,OAHAhG,KAAAqF,KAAArF,KAAAqF,KAAAa,UAAAxC,EAAApD,QACAN,KAAAsF,KAAA5B,EAAApD,OAEAoD,GAOA0B,EAAApG,UAAAmH,UAAA,SAAA/B,GACA,IAAA4B,EAAAC,EAAAjG,KAAAqF,KAAAe,OAAAhC,GAEA,OAAA6B,GACA,OACAD,EAAAhG,KAAAqF,KACArF,KAAAqF,KAAA,GACA,MACA,OACAW,EAAA,GACA,MACA,QACAA,EAAAhG,KAAAqF,KAAAa,UAAA,EAAAD,GACAjG,KAAAqF,KAAArF,KAAAqF,KAAAa,UAAAD,GAKA,OAFAjG,KAAAsF,KAAAU,EAAA1F,OAEA0F,GAiBAT,EAAAvG,UAAAqH,KAAA,SAAAb,GACA,WAAAD,EAAAC,EAAAxF,OAOAuF,EAAAvG,UAAAsH,OAAA,SAAA3I,GACA,IAEAU,EAFAqH,EAAA1F,KAAA0F,MAGA,GAAAA,EAAAzG,eAAAtB,GACAU,EAAAqH,EAAA/H,OACK,CAGL,IAFA,IAAA4I,EAAAN,EAAAO,EAAAxG,KAAAyG,GAAA,EAEAD,GAAA,CACA,GAAA7I,EAAA6C,QAAA,OAgBA,IAfAnC,EAAAmI,EAAAhB,KACAe,EAAA5I,EAAA8C,MAAA,KACAwF,EAAA,EAaA,MAAA5H,GAAA4H,EAAAM,EAAAjG,QACA2F,IAAAM,EAAAjG,OAAA,IACAmG,EAAA7C,EAAAvF,EAAAkI,EAAAN,KAEA5H,IAAAkI,EAAAN,WAGA5H,EAAAmI,EAAAhB,KAAA7H,GACA8I,EAAA7C,EAAA4C,EAAAhB,KAAA7H,GAGA,GAAA8I,EACA,MAEAD,IAAAZ,OAGAF,EAAA/H,GAAAU,EAMA,OAHAmF,EAAAnF,KACAA,IAAAd,KAAAyC,KAAAwF,OAEAnH,GAeAwH,EAAA7G,UAAA0H,WAAA,WACA1G,KAAA0F,UAOAG,EAAA7G,UAAAoD,MAAA,SAAAuE,EAAAC,GACA,IAAAlB,EAAA1F,KAAA0F,MACAmB,EAAAnB,EAAAiB,GAKA,OAHA,MAAAE,IACAA,EAAAnB,EAAAiB,GAzVA,SAAAA,EAAAC,GACA,IAAAD,EACA,SAEA,IAoBAG,EAAAC,EAAAC,EApBAC,KACAJ,KACAK,KACAC,GAAA,EACAC,GAAA,EAIA,SAAAC,IACA,GAAAF,IAAAC,EACA,KAAAF,EAAA5G,eACAuG,EAAAK,EAAAI,YAEAJ,KAGAC,GAAA,EACAC,GAAA,EAIA,SAAAG,EAAAC,GAIA,GAHA,iBAAAA,IACAA,IAAA/G,MAAAuE,EAAA,KAEA7E,EAAAqH,IAAA,IAAAA,EAAAlH,OACA,UAAAF,MAAA,iBAAAoH,GAEAV,EAAA,IAAA9C,OAAAP,EAAA+D,EAAA,YACAT,EAAA,IAAA/C,OAAA,OAAAP,EAAA+D,EAAA,KACAR,EAAA,IAAAhD,OAAA,OAAAP,EAAA,IAA0D+D,EAAA,KAG1DD,EAAAX,GAAAvD,EAAAuD,MAKA,IAHA,IAEAa,EAAAC,EAAArJ,EAAAsJ,EAAAC,EAAAC,EAFAC,EAAA,IAAA1C,EAAAuB,IAGAmB,EAAAhC,OAAA,CAMA,GALA2B,EAAAK,EAAAxC,IAGAjH,EAAAyJ,EAAA3B,UAAAW,GAGA,QAAA1J,EAAA,EAAA2K,EAAA1J,EAAAiC,OAAmDlD,EAAA2K,IAAiB3K,EAGpE+G,EAFAwD,EAAAtJ,EAAA2J,OAAA5K,IAGA8J,EAAAb,KAAAQ,EAAAvG,QAEA8G,GAAA,EAGAP,EAAAR,MAAA,OAAAsB,EAAAF,IAAA,IACAA,GAAA,EAGA,OAAAE,GACAN,IAKA,IAAAS,EAAA/B,KAAAe,GACA,MAuBA,GArBAK,GAAA,EAGAO,EAAAI,EAAA/B,KAAAZ,IAAA,OACA2C,EAAA/B,KAAAhB,GAGA,MAAA2C,GACArJ,EAAAyJ,EAAA3B,UAAAlB,GACA6C,EAAA/B,KAAAd,GACA6C,EAAA3B,UAAAY,IACO,MAAAW,GACPrJ,EAAAyJ,EAAA3B,UAAAa,GACAc,EAAA/B,KAAAb,GACA4C,EAAA3B,UAAAY,GACAW,EAAA,KAEArJ,EAAAyJ,EAAA3B,UAAAY,IAIAe,EAAA/B,KAAAgB,GACA,UAAA3G,MAAA,mBAAA0H,EAAAxC,KAKA,GAHAsC,GAAAF,EAAArJ,EAAAoJ,EAAAK,EAAAxC,KACAuB,EAAAR,KAAAuB,GAEA,MAAAF,GAAA,MAAAA,EACAT,EAAAZ,KAAAuB,QACO,SAAAF,EAAA,CAIP,KAFAG,EAAAZ,EAAAK,OAGA,UAAAlH,MAAA,qBAAA/B,EAAA,QAAAoJ,GAEA,GAAAI,EAAA,KAAAxJ,EACA,UAAA+B,MAAA,qBAAAyH,EAAA,WAAAJ,OACO,SAAAC,GAAA,MAAAA,GAAwC,MAAAA,EAC/CN,GAAA,EACO,MAAAM,GAEPH,EAAAlJ,GAOA,GAFAwJ,EAAAZ,EAAAK,MAGA,UAAAlH,MAAA,qBAAAyH,EAAA,WAAAC,EAAAxC,KAEA,OAkCA,SAAAuB,GAMA,IALA,IAIAe,EAJAK,KACAC,EAAAD,EACAhB,KAGA7J,EAAA,EAAA+K,EAAAtB,EAAAvG,OAA8ClD,EAAA+K,IAAe/K,EAG7D,QAFAwK,EAAAf,EAAAzJ,IAEA,IACA,QACA,QACA8K,EAAA7B,KAAAuB,GACAX,EAAAZ,KAAAuB,GACAM,EAAAN,EAAA,MACA,MACA,QACAX,EAAAK,MACA,GAAAM,EAAA,GACAM,EAAAjB,EAAA3G,OAAA,EAAA2G,IAAA3G,OAAA,MAAA2H,EACA,MACA,QACAC,EAAA7B,KAAAuB,GAIA,OAAAK,EA5DAG,CAOA,SAAAvB,GAIA,IAHA,IAEAe,EAAAS,EAFAC,KAGAlL,EAAA,EAAA+K,EAAAtB,EAAAvG,OAA8ClD,EAAA+K,IAAe/K,GAC7DwK,EAAAf,EAAAzJ,MAGA,SAAAwK,EAAA,IAAAS,GAAA,SAAAA,EAAA,IACAA,EAAA,IAAAT,EAAA,GACAS,EAAA,GAAAT,EAAA,KAEAU,EAAAjC,KAAAuB,GACAS,EAAAT,IAKA,OAAAU,EAzBAC,CAAA1B,IA8NA2B,CAAA7B,EAAAC,IAEAC,GAYAhB,EAAA7G,UAAAyJ,OAAA,SAAA9B,EAAAnB,EAAAkD,GACA,IAAA7B,EAAA7G,KAAAoC,MAAAuE,GACAH,EAAAhB,aAAAD,EAAAC,EAAA,IAAAD,EAAAC,GACA,OAAAxF,KAAA2I,aAAA9B,EAAAL,EAAAkC,EAAA/B,IAYAd,EAAA7G,UAAA2J,aAAA,SAAA9B,EAAAL,EAAAkC,EAAAE,GAIA,IAHA,IAEAhB,EAAAiB,EAAAxK,EAFAyK,EAAA,GAGA1L,EAAA,EAAA+K,EAAAtB,EAAAvG,OAA8ClD,EAAA+K,IAAe/K,EAC7DiB,OAAAkD,EAIA,OAFAsH,GADAjB,EAAAf,EAAAzJ,IACA,IAEAiB,EAAA2B,KAAA+I,cAAAnB,EAAApB,EAAAkC,EAAAE,GACA,MAAAC,EAAAxK,EAAA2B,KAAAgJ,eAAApB,EAAApB,EAAAkC,EAAAE,GACA,MAAAC,EAAAxK,EAAA2B,KAAAiJ,cAAArB,EAAApB,EAAAkC,EAAAE,GACA,MAAAC,EAAAxK,EAAA2B,KAAAkJ,eAAAtB,EAAApB,GACA,SAAAqC,EAAAxK,EAAA2B,KAAAmJ,aAAAvB,EAAApB,GACA,SAAAqC,IAAAxK,EAAA2B,KAAAoJ,SAAAxB,SAEArG,IAAAlD,IACAyK,GAAAzK,GAGA,OAAAyK,GAGAjD,EAAA7G,UAAA+J,cAAA,SAAAnB,EAAApB,EAAAkC,EAAAE,GACA,IAAAS,EAAArJ,KACA8I,EAAA,GACAzK,EAAAmI,EAAAF,OAAAsB,EAAA,IAQA,GAAAvJ,EAAA,CAEA,GAAA8B,EAAA9B,GACA,QAAAiL,EAAA,EAAAvB,EAAA1J,EAAAiC,OAAiDgJ,EAAAvB,IAAiBuB,EAClER,GAAA9I,KAAA2I,aAAAf,EAAA,GAAApB,EAAAH,KAAAhI,EAAAiL,IAAAZ,EAAAE,QAEK,oBAAAvK,GAAA,iBAAAA,GAAA,iBAAAA,EACLyK,GAAA9I,KAAA2I,aAAAf,EAAA,GAAApB,EAAAH,KAAAhI,GAAAqK,EAAAE,QACK,GAAApF,EAAAnF,GAAA,CACL,oBAAAuK,EACA,UAAAxI,MAAA,kEAKA,OAFA/B,IAAAd,KAAAiJ,EAAAhB,KAAAoD,EAAAW,MAAA3B,EAAA,GAAAA,EAAA,IAjBA,SAAAjB,GACA,OAAA0C,EAAAZ,OAAA9B,EAAAH,EAAAkC,QAmBAI,GAAAzK,QAEAyK,GAAA9I,KAAA2I,aAAAf,EAAA,GAAApB,EAAAkC,EAAAE,GAEA,OAAAE,IAGAjD,EAAA7G,UAAAgK,eAAA,SAAApB,EAAApB,EAAAkC,EAAAE,GACA,IAAAvK,EAAAmI,EAAAF,OAAAsB,EAAA,IAIA,IAAAvJ,GAAA8B,EAAA9B,IAAA,IAAAA,EAAAiC,OACA,OAAAN,KAAA2I,aAAAf,EAAA,GAAApB,EAAAkC,EAAAE,IAGA/C,EAAA7G,UAAAiK,cAAA,SAAArB,EAAApB,EAAAkC,GACA,GAAAA,EAAA,CAEA,IAAArK,EAAAmF,EAAAkF,KAAAd,EAAA,IAAAc,EAAAd,EAAA,IACA,aAAAvJ,EACA2B,KAAA2I,aAAA3I,KAAAoC,MAAA/D,GAAAmI,EAAAkC,EAAArK,QADA,IAIAwH,EAAA7G,UAAAkK,eAAA,SAAAtB,EAAApB,GACA,IAAAnI,EAAAmI,EAAAF,OAAAsB,EAAA,IACA,SAAAvJ,EACA,OAAAA,GAGAwH,EAAA7G,UAAAmK,aAAA,SAAAvB,EAAApB,GACA,IAAAnI,EAAAmI,EAAAF,OAAAsB,EAAA,IACA,SAAAvJ,EACA,OAAAgF,EAAAmG,OAAAnL,IAGAwH,EAAA7G,UAAAoK,SAAA,SAAAxB,GACA,OAAAA,EAAA,IAGAvE,EAAA1F,KAAA,cACA0F,EAAAoG,QAAA,QACApG,EAAAuD,MAAA,KAAuB,MAGvB,IAAA8C,EAAA,IAAA7D,EAuDA,OAlDAxC,EAAAqD,WAAA,WACA,OAAAgD,EAAAhD,cAQArD,EAAAjB,MAAA,SAAAuE,EAAAC,GACA,OAAA8C,EAAAtH,MAAAuE,EAAAC,IAOAvD,EAAAoF,OAAA,SAAA9B,EAAAnB,EAAAkD,GACA,oBAAA/B,EACA,UAAAgD,UAAA,yDArjBAxJ,EADA0D,EAujBA8C,GAtjBA,eAAA9C,GAsjBA,mFAvjBA,IAAAA,EA2jBA,OAAA6F,EAAAjB,OAAA9B,EAAAnB,EAAAkD,IAKArF,EAAAuG,QAAA,SAAAjD,EAAAnB,EAAAkD,EAAAmB,GAGA,IAAAC,EAAAzG,EAAAoF,OAAA9B,EAAAnB,EAAAkD,GAEA,IAAAlF,EAAAqG,GAGA,OAAAC,EAFAD,EAAAC,IAQAzG,EAAAmG,OAviBA,SAAA9F,GACA,OAAAqG,OAAArG,GAAAC,QAAA,wBAAAxE,GACA,OAAAmF,EAAAnF,MAwiBAkE,EAAA+B,UACA/B,EAAAkC,UACAlC,EAAAwC,SAEAxC,GA5mBA,iBAAAnG,MAAA,iBAAAA,EAAA8M,SACA5G,EAAAlG,IAEAgG,GAAAhG,QAAAqE,KAAA4B,EAAA,mBAAAF,EAAA,GAAAA,EAAAgH,MAAA/M,EAAAgG,GAAAD,KAAA9F,EAAAD,QAAAiG,mBCXAhG,EAAAD,QAAAmC,uBCAA,IAAAwD,EAAA7F,EAAA,GACAyC,EAAAzC,EAAA,GACAkN,EAAAlN,EAAA,GACAmN,EAAAnN,EAAA,GACA,IAAAkD,MAGA,SAAAkK,EAAAC,EAAAC,GAIApK,MAAAC,QAAAkK,KACAA,OAEArK,KAAAqK,iBAEArK,KAAAsK,KADAA,GAGAD,EAAA,GAEArK,KAAAuK,QAIA,WACAJ,EAAAnH,MAAA,IACAwH,EAAAN,EAAA3E,QAAAvG,UAAAsH,OACA4D,EAAA3E,QAAAvG,UAAAsH,OAAA,SAAA3I,GACA,GAAAqC,KAAAwF,gBAAA4E,EAAAK,SAAA,CACA,IAAAzH,EAAAhD,KAAAwF,KAAAxC,MACA0H,EAAA1K,KAAAwF,KAAAkF,UACA5K,EAAA4K,EAAA5K,MACA0G,EAAAxG,KAAAwF,KAAAgB,QACA,SAAAmE,EAAAC,GA6EA,IAAAC,EAxCA,SAAAnH,GACA,IAAAoG,KACAgB,GAAA,EACAC,GAAA,EACAC,EAAA,GACA,SAAAC,IACAD,EAAA1K,OAAA,IACAwJ,EAAAzD,KAAA2E,GACAA,EAAA,IAGA,QAAA1F,EAAA,EAAqCA,EAAA5B,EAAApD,OAAqBgF,IAAA,CAC1D,IAAA7H,EAAAiG,EAAA4B,GACAyF,IACA,MAAAtN,IACAwN,IACAH,GAAA,GAEAE,GAAA,IACAD,GAAA,GAEA,MAAAtN,EAIAqN,GAAA,KAAArN,GACAuN,GAAAvN,EACAwN,IACAH,GAAA,GAGAA,GAAA,KAAArN,EAIAuN,GAAAvN,EAHAwN,IAVAF,GAAA,EAgBA,OADAE,IACAnB,EAEAoB,CAAAN,GACA,OA7EA,SAAAO,EAAA9K,EAAAwK,GAgBA,IAAAO,EAdA,OADAJ,EAeAH,EAAA,IAbAxK,EAEA2K,EAAAK,SAAA,MACAhL,EAAAiL,GAAAlB,EAAAmB,aAAAP,EAAA9E,UAAA,EAAA8E,EAAA1K,OAAA,KAEA0K,EAAAQ,WAAA,KACAnL,EAAAiL,GAAAlB,EAAAmB,aAAAP,EAAA9E,UAAA,KAEA7F,EAAAoL,IAAArB,EAAAmB,aAAAP,IAVA,IAAAA,EAgBA,OAAAH,EAAAvK,OAAA,CACA,IAAAoL,EAAAN,EAAAvL,MACA,OAAA6L,EAAApL,OAAA,CAEA,GAAAD,EAAAR,MAAA,GAAA8L,UACAvB,EAAAmB,aAAAV,EAAA,IAAAe,OAAA/I,EAAAD,IAAA,sCACA,OAAAC,EAAAgJ,QAAAxL,EAAAR,MAAA,GAAA8L,WAGA,GAAAtL,EAAAR,MAAA,GAAAiM,UACA1B,EAAAmB,aAAAV,EAAA,IAAAe,OAAAxB,EAAAmB,aAAA,aACA,OAAAlL,EAAAR,MAAA,GAAAiM,UAIA,OAAAJ,EAEA,OAAAP,EAAAC,EAAAP,EAAAtB,MAAA,IA2CA4B,CAAAT,EAAAG,GAEA,GAAAlN,EAAA6N,WAAA,aACA,IACAO,GADAC,EAAArO,EAAA8C,MAAA,MACA,GACAwL,EAAAD,EAAA,GACAE,EAAAH,EAAA7F,UAAA,EAAA6F,EAAAzL,OAAA,GACA6L,EAAAF,EAAA/F,UAAA,EAAA+F,EAAA3L,OAAA,GAEA,OADA8J,EAAAgC,UAAAF,GAAAC,EACA,GAEA,GAAAxO,EAAA6N,WAAA,aACA,IAAAQ,EAEAK,EADAC,GADAN,EAAArO,EAAA8C,MAAA,MACA,IACA4L,EAAAL,EAAA,MAEAK,EAAAjC,EAAAmB,aAAAc,IAEAA,IACAA,EAAA7F,GAEA,IAAA+F,EAAA5B,EAAA2B,GAIA,OAHAC,EAAAjM,OAAA,GACAkC,QAAAgK,KAAA,uDAEAD,EAAAjM,OAAA,EACA0C,EAAAyF,OAAA3I,EAAAyM,EAAA,GAAAF,GAEA,GAGA,GAAA1O,EAAA6N,WAAA,aAYA,OAVAa,GADAL,EAAArO,EAAA8C,MAAA,MACA,MAEA4L,EAAAjC,EAAAmB,aAAAc,IAEAA,IACAA,EAAA7F,GAEAkE,EAAA7K,MAAAS,OAAA,GACAkC,QAAAgK,KAAA,qFAEAxJ,EAAAyF,OAAA3I,EAAA4K,EAAA7K,MAAA,GAAAwM,GAGA,GAAA1O,EAAA6N,WAAA,KAEA,OAAAb,EADAhN,IAAAuI,UAAA,IACA5F,OAAA,EAEA,IAAAT,EAAA8K,EAAAhN,GACA,WAAAkC,EAAAS,OACA,IAAA8J,EAAAK,SAAAzH,EAAAvD,EAAAI,EAAA,GAAAC,GAAA0G,GAEA3G,EAAAqB,IAAA,SAAAb,GACA,WAAA+J,EAAAK,SAAAzH,EAAAvD,EAAAY,EAAAP,GAAA0G,KAUA,OAAAgE,EAAAjN,KAAAyC,KAAArC,IAxJA,GA6JAyM,EAAAK,SAAA,SAAAzH,EAAA0H,EAAAlE,GACA,IAAAkE,EAAA7K,MACA,UAAAO,MAAA,uCAEA,OAAAsK,EAAA7K,MAAAS,OACA,UAAAF,MAAA,kCAEAJ,KAAAgD,QACAhD,KAAA0K,YACA1K,KAAAwG,WAGA4D,EAAAK,SAAAzL,UAAAuE,SAAA,WACA,OAAAvD,KAAA0K,UAAArM,MACA2B,KAAA0K,UAAArM,MAEA2B,KAAA0K,UAAAnH,YAGA6G,EAAApL,UAAAyN,YAAA,SAAAC,GACAvC,EAAAnH,MACA,IAAAsH,EAAAtK,KAAAsK,KA2DA,IAAAjB,EAAArJ,KAaA,IAAA2M,EAxCA,aAFAjC,EA0CAgC,EAAAhC,WAxCArK,KAAAE,UACAmK,EAAArK,KAAAyL,UAEApB,EAAAe,IAAAtB,EAAAtH,IAAA,SAAAhD,MAAA+M,KACA,CAAAC,EAAAC,IACAD,EAAAjB,OAAAkB,GACA,EAEAD,EAAAjB,OAAAzB,EAAArH,KAAA,aACA,EAEAgK,EAAAlB,OAAAzB,EAAArH,KAAA,cACA,EAEA,IAAAwH,EAAAtE,MAAA6G,EAAA1C,EAAArH,KAAA,cAAAgK,GAAAxM,OACA,IAAAgK,EAAAtE,MAAA8G,EAAA3C,EAAArH,KAAA,cAAA+J,GAAAvM,OACAuM,EAAAxO,MAAA0O,cAAAD,EAAAzO,OAEA,GAGA,GAGA2O,QAAA7C,EAAArH,KAAA,cA1BA,IAAA4H,EA2CA,IAAAuC,EAbA,SAAAN,EAAAnG,GAIA,IAAA0G,EAAA7D,EAAAgB,eAAA8C,UACA,OAAAR,EAAAS,OAAA,CAAAH,EAAAvF,IACAuF,GAAAC,EAAAE,OAAA,CAAAH,EAAAnN,KACA4H,EAAAjI,EAAAiI,EAAA5H,GACAmN,GAAAvF,EAAA4D,GAAAnB,EAAAnH,MAAA,SAAAvC,QANA4M,KAAAJ,GAAAzG,EAAAoF,OAAAqB,EAAAxB,IAAAtB,EAAAnH,MAAA,YAAA3C,QAOa,MACJ,MAGTiN,CAAAX,EAAAD,EAAAlG,SACA,IAAAyG,EACA,MAAA7M,MAAA,oCAAAsM,EAAAlG,QAAAnI,MAAA,0BAAAsO,EAAAzL,IAAA5C,GAAA,IAAAA,EAAAD,MAAA,KAAAkP,OACA,mBAAAb,EAAAhC,UAAArM,MAAA,iCAEA,IAAAgF,EAAA4J,EAAAxB,IAAAtB,EAAAnH,MAAA,aACA,GAAAK,EAAAxD,MAAAS,OAAA,EACA,OAvDA,SAAA2M,GACA,gBAAAP,GACA,OAAAxC,EAAAzB,OAAAwE,EAAAP,IAqDAc,CAAAnK,EAAAhF,OAEA,IAAAoP,EAAAR,EAAAxB,IAAAtB,EAAAnH,MAAA,eACA,gBAAA0J,GACA,IACA,IAAAjE,EAAA,CAAA5J,EAAA2H,IACAkG,EAAA1J,MAAAyF,OAAA5J,EAAAiB,MAAAjB,EAAAwB,KAAAmG,GAAAkG,EAAAlG,SAEAkH,EAAA,GACAC,EAAAxO,IACAuO,GAAAvO,GAGAyO,EAAA,IAAAC,SAAA,wDAAAJ,EAAApP,MAAA,CACAqO,EAAAhC,UAAAgC,EAAAlG,QAAA3D,EAAA4F,EAAAkF,EAAAlO,EAAAiN,EAAA1J,MAAAuH,KACA,OAAAqD,EACAF,EAAAE,EAEAF,EAES,MAAAI,GACTA,EAAAC,QAAAD,EAAAC,QAAA,OAAAN,EAAApP,MACA,IAAA2P,EAAAF,EAAAG,MAAAxN,MAAA,MACAyN,EAAAF,EAAAG,UAAA9Q,KAAAmD,QAAA,mBAEA,MADAsN,EAAAG,MAAAD,EAAAI,OAAA,EAAAF,EAAA,GAAAX,KAAA,MACAO,KAOA1D,EAAApL,UAAAyJ,OAAA,SAAA3I,EAAAO,EAAAmG,GACAnG,EAAAE,WACAF,EAAAwC,EAAAD,IAAAvC,IAEAmG,IACAA,EAAA2D,EAAAnH,MAAA,YAGA,IAAA0J,EAAA,IAAAtC,EAAAK,SAAAzK,KAAAP,EAAAY,EAAAP,GAAA0G,GAEA,OADAxG,KAAAyM,YAAAC,EACAO,CAAAP,IAGAtC,EAAAgC,aACAhC,EAAAgC,UAAA,kDACAhC,EAAAgC,UAAA,6CACAhC,EAAAgC,UAAA,yCACAhC,EAAAgC,UAAA,4BACAhC,EAAAgC,UAAA,kDACAhC,EAAAgC,UAAA,gCAGAhC,EAAAmB,aAAA,SAAA8C,GACA,GAAAA,EAAA7C,WAAA,MAAA6C,EAAAhD,SAAA,KAEA,OAAAxI,EAAAD,IAAAyL,EAAAnI,UAAA,EAAAmI,EAAA/N,OAAA,IAEA,IAAA0L,EAAAqC,EAAA5N,MAAA,KACAyL,EAAAF,EAAA,GACArJ,EAAAqJ,EAAA,GACA,OAAA5B,EAAAgC,UAAAF,GACArJ,EAAAD,IAAAwH,EAAAgC,UAAAF,GAAAvJ,GAEAE,EAAAD,IAAAyL,IAKA,oBAAA7O,SACAA,OAAA4K,SAIAjN,EAAAD,QAAAkN,iBCrWAjN,EAAAD,QAAAoR,gCCAA,IAAIA,EAAItR,EAAQ,GACZ6F,EAAM7F,EAAQ,GACdoN,EAAQpN,EAAQ,GAChByC,EAAYzC,EAAQ,GAGxB,SAASuR,KAKT,SAASC,EAAenO,EAAMoO,GAC1B,GAAyB,SAArBpO,EAAK,GAAG2J,SAAqB,CAC7B,IAAI0E,EAAMC,SAASC,cAAc,QACjCF,EAAIG,UAAYJ,EAChB,IAAKK,EAAOJ,EAAIK,qBAAqB,QAAQ,GAAGF,UAC5CG,EAAON,EAAIK,qBAAqB,QAAQ,GAAGF,UAC/CxO,EAAKgN,KAAK,QAAQ4B,KAAKH,GACvBzO,EAAKgN,KAAK,QAAQ4B,KAAKD,QAEvB3O,EAAK4O,KAAKR,GAIlBF,EAAKW,OAAS,WACV,SAASC,EAAaC,GAElB,IAAIC,EAAMV,SAASC,cAAc,OAIjC,OAHAS,EAAIR,UAAY,UAChBQ,EAAIC,WAAWC,KAAOH,EACtBC,EAAIR,UAAYQ,EAAIR,UACbQ,EAAIC,WAAWC,KAE1B,OAAOhB,EAAKiB,oBAAoB1O,KAAK,SAAU2O,GAC3C,OAAOlB,EAAKmB,eAAe5O,KAAK,SAAU6O,GAsEtC,OArEA,SAASC,IACL,IAqBIC,EArBAC,EAAiB,IAAI5P,OAErB2P,EAAQvB,EAAE,YACRyB,YAAY,UAClB,IAAK,IAAI3S,EAAI,EAAGA,EAAIyS,EAAMvP,OAAQlD,IAAK,CACnC,IAAI4S,EAAO1B,EAAEuB,EAAMzS,IACfoJ,EAAUwJ,EAAKC,KAAK,WACpBzJ,IACAA,EAAU4D,EAAMmB,aAAa/E,IAEjC,IAAI0J,EAAcF,EAAKC,KAAK,YAC5B,QAA2B,IAAhBC,EAA6B,CACpC,IAAItP,EAAMuO,EAAae,GAEvB1B,EAAewB,EADA,IAAI5F,EAAMqF,GAAWhH,OAAOkH,EAAW9M,EAAID,IAAIhC,GAAM4F,IAEpEsJ,EAAezJ,KAAKuJ,UAEpBpN,QAAQgK,KAAK,yEAA0EwD,IAI3FH,EAAQvB,EAAE,WACRyB,YAAY,SAClB,IAAII,EAAc,EA2ClB,OA1CA,SAASC,IACL,KAAID,GAAeN,EAAMvP,QAAzB,CAGA,IAAI0P,EAAO1B,EAAEuB,EAAMM,MACf3J,EAAUwJ,EAAKC,KAAK,WACpBzJ,IACAA,EAAU4D,EAAMmB,aAAa/E,IAEjC,IAAI0J,EAAcF,EAAKC,KAAK,YAC5B,QAA2B,IAAhBC,EAA6B,CACpC,IAEIG,EAFAzP,EAAMuO,EAAae,GACnBI,EAAmBN,EAAKC,KAAK,SAG7BI,OAD4B,IAArBC,EACInB,EAAamB,GAEb1P,EAAIH,MAAM,KAAK,GAE9BhB,EAAUoB,SAASwP,GAAUE,MAAM,SAASlO,GAC5BG,QAAQgK,KAAK,oBAAoB6D,EAAS,KAAKhO,KAChDvB,KAAK,SAASC,GACb,OAAOA,EAASjB,QAAQgB,KACpB,SAAA0P,GACIhO,QAAQC,IAAI,qBAAqB+N,EAAKlQ,OAAO,SAAS+P,GACtD,IAAII,EAAW,IAAIrG,EAAMqF,GAAWhH,OAAO+H,EAAM3N,EAAID,IAAIhC,GAAM4F,GAE/D,OADAgI,EAAewB,EAAMS,GACdb,QAGpBW,MAAM,SAASlO,GACdG,QAAQgK,KAAK,mBAAmB6D,EAAS,KAAKhO,GAC1CA,EAAM4L,OACNzL,QAAQgK,KAAKnK,EAAM4L,cAInCzL,QAAQgK,KAAK,wEAAyEwD,GAE1FI,KAEJA,GACO1P,QAAQS,IAAI2O,GAEhBF,QAMnBrB,EAAKmB,aAAe,WAChB,OAAO,IAAIhP,QAAQ,SAASC,EAASsB,GACjC,IAAIyO,EAAYpC,EAAE,SACdqC,EAAgBD,EAASvO,OACzByO,EAAsBF,EAAST,KAAK,QACpCO,EAAO3N,EAAI/C,QACf+C,EAAIT,MAAMuO,EAAeH,EAAMhR,OAAOqR,SAAStN,WAAW9C,MAAM,KAAK,GAAImQ,EAAqB,SAAC9C,EAAKhE,GAC5FgE,EACA7L,EAAO6L,GAEPnN,EAAQmJ,QAMxByE,EAAKiB,kBAAoB,WACrB,OAAO,IAAI9O,QAAQ,SAASC,EAASsB,GACjC,SAASG,EAAMuO,EAAeC,GAC1B,IAAI9Q,EAAQ+C,EAAI/C,QACX8Q,IACDA,EAAsB,eAE1B/N,EAAIT,MAAMuO,EAAe7Q,EAAON,OAAOqR,SAAStN,WAAW9C,MAAM,KAAK,GAAImQ,EAAqB,kBAAMjQ,EAAQb,KAEjH,IAAIgR,EAAgBxC,EAAE,cACtB,GAAIwC,EAAc,GAAI,CAClB,GAAIA,EAAcb,KAAK,OACnBzN,QAAQgK,KAAK,8FACb8B,EAAErQ,IAAI6S,EAAcb,KAAK,OAAQ,SAAUc,GACvC3O,EAAM2O,UAIV3O,EADoB0O,EAAc3O,OACb2O,EAAcb,KAAK,aAEzC,CACH,IAAIe,EAAgB1C,EAAE,yBACtB,GAAI0C,EAAc1Q,OAAS,EAAG,CAG1B,IADA,IAAI2Q,EAAgB,IAAI/Q,MACfgR,EAAY,EAAGA,EAAYF,EAAc1Q,OAAQ4Q,IAAa,CACnE,IAAI3B,EAAOyB,EAAcE,GAAW3B,KAAK9O,MAAM,KAAK,GACpDwQ,EAAc5K,KAAK5G,EAAUoB,SAAS0O,GAAMzO,KAAK,SAAA5C,GAAA,OAAKA,EAAE4B,WAG5Da,EAAQD,QAAQS,IAAI8P,SAGpBzO,QAAQgK,KAAK,mIAOP,oBAAXhN,SACPA,OAAO+O,KAAOA,GAGdpR,EAAOD,QAAUqR","file":"ld2h.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = $rdf;","var $rdf = require(\"ext-rdflib\");\nvar fetch = require(\"node-fetch\");\n\n/**\n * Node Status:\n * \n * Locally undetermined: There are multiple local nodes satisfying the criteria specified for this object \n * Blank: The object represents a blank node in a graph that is locally available\n * Unresolved: This node is identified by a URI that has not yet been derefernced\n * \n * @type type\n */\n\nlet Headers = ((h) => h ? h : window.Headers)(fetch.Headers);\n\nfunction GraphNode() {\n    return new GraphNode.Impl(...arguments);\n}\n\nGraphNode.Impl = class {\n        \n        constructor(nodes, graph, sources) {\n            this._graph = graph;\n            if (Array.isArray(nodes)) {\n                this.nodes = nodes;\n                /*if (this.nodes.length === 0) {\n                    throw \"Can't represent empty set of nodes\";\n                }*/\n            } else {\n                this.nodes = [nodes];\n            }\n            this.sources = sources;\n        }\n        \n        get graph() {\n            if (!this._graph) {\n                throw Error(\"Operation not possible as no Graph is available, try fetching first\");\n            }\n            return this._graph;\n        }\n        \n        get node() {\n            if (this.nodes.length !== 1) {\n                throw Error(\"Operation not possible as this GraphNode is underdetermined\");\n            }\n            return this.nodes[0];\n        }\n        \n        get termType() {\n            return this.node.termType;\n        }\n        \n        get value() {;\n            return this.node.value;\n        }\n        \n        fetch() {\n            if ((this.termType !== \"NamedNode\") || \n                        (this.sources && this.sources.indexOf(this.value.split(\"#\")[0]) > -1)) {\n                return Promise.resolve(this);\n            } else {\n                //TODO extend existing graph?\n                var uri = this.value.split(\"#\")[0];\n                return GraphNode.rdfFetch(uri).then(response => response.graph()).then(graph => GraphNode(this.node, graph, [uri]));\n            }\n        }\n        \n        /*\n         * \n         * @param {type} f\n         * @returns {unresolved} a promise that is satisfied when all promises returned by f are resolved\n         */\n        each(f) {\n            var results = this.nodes.map(node => f(GraphNode([node], this.graph, this.sources)));\n            return Promise.all(results);\n        }\n        \n        fetchEach(f) {\n            var results = this.nodes.map(node => GraphNode([node], this.graph, this.sources).fetch().then(f));\n            return Promise.all(results);\n        }\n\n        /**\n         * Returns a GraphNode for each node represented by this GraphNode\n         */\n        split() {\n            return this.nodes.map(node => GraphNode([node], this.graph, this.sources));\n        }\n        \n        out(predicate) {\n            var nodes = this.graph.each(this.node, predicate);\n            /*if (nodes.length === 0) {\n                throw \"No property \"+predicate+\" on \"+this.node;\n            }*/\n            return GraphNode(nodes, this.graph, this.sources);\n        }\n        \n        in(predicate) {\n            var statements = this.graph.statementsMatching(undefined, predicate, this.node);\n            /*if (statements.length === 0) {\n                throw \"No property \"+predicate+\" pointing to \"+this.node;\n            }*/\n            return GraphNode(statements.map(statement => statement.subject), this.graph, this.sources);\n        }\n    }\n\n/**\n * \n * Fetches an RDF graph. If the server return 401 the login process will be \n * started upon which the fetch will be retried.\n *\n * @param uri {string} The URI to be fetched\n * @param options passed to $rdf.Fetcher\n * @param login {boolean} The login function to be called, optional\n *\n * @return {Promise<Response>} Response has a `graph`property with the rertived graph\n */\nGraphNode.rdfFetch = function(uri, options, login) {\n    function plainFetch(uri, init = {}) {\n        if (!init.headers) {\n            init.headers = new Headers();\n        }\n        if (!init.headers.get(\"Accept\")) {\n            init.headers.set(\"Accept\", \"text/turtle;q=1, application/n-triples;q=.9, \"+\n                \"application/rdf+xml;q=.8, application/ld+json;q=.7, */*;q=.1\");\n        }\n        return fetch(uri, init).then(response => {\n            if (response.ok) {\n                response.graph = () => new Promise((resolve, reject) => {\n                    let graph = $rdf.graph();\n                    let mediaType = response.headers.get(\"Content-type\").split(\";\")[0];\n                    return response.text().then(text => {\n                        $rdf.parse(text, graph, uri, mediaType, (error, graph) => {\n                            if (error) {\n                                reject(error);\n                            } else {\n                                resolve(graph);\n                            }\n                        });\n                    });\n                });\n                return response;\n            } else {\n                return response;\n            }\n        });\n    };\n    var ggg = this;\n    return plainFetch(uri, options).then(function (response) {\n        if (response.status < 300) {\n            return response;\n        } else {\n            if (login && response.status === 401) {\n                console.log(\"Got 401 response, attempting to login\");\n                return login().then(function () {\n                    return ggg.rdfFetch(uri, options);\n                });\n            } else {\n                return response;\n            }\n        }\n    });\n};\n\nmodule.exports = GraphNode;\n","var $rdf = require(\"ext-rdflib\");\n\nmodule.exports = {\n    schema: function (suffix) {\n        return $rdf.sym(\"http://schema.org/\" + suffix);\n    },\n    rdf: function (suffix) {\n        return $rdf.sym(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" + suffix);\n    },\n    rdfs: function (suffix) {\n        return $rdf.sym(\"http://www.w3.org/2000/01/rdf-schema#\" + suffix);\n    },\n    foaf: function (suffix) {\n        return $rdf.sym(\"http://xmlns.com/foaf/0.1/\" + suffix);\n    },\n    rdf2h: function(suffix) {\n        return $rdf.sym(\"http://rdf2h.github.io/2015/rdf2h#\"+suffix);\n    }\n}\n","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n","module.exports = fetch;","var rdf = require(\"ext-rdflib\");\nvar GraphNode = require(\"rdfgraphnode-rdfext\");\nvar Mustache = require(\"mustache\");\nvar vocab = require(\"./vocab.js\");\nvar NodeSet = new Array();\n\n\nfunction RDF2h(rendererGraphs, tbox) {\n    function r2h(suffix) {\n        return rdf.sym(\"http://rdf2h.github.io/2015/rdf2h#\"+suffix);\n    }\n    if (!Array.isArray(rendererGraphs)) {\n        rendererGraphs = [rendererGraphs];\n    }\n    this.rendererGraphs = rendererGraphs;\n    if (tbox) {\n        this.tbox = tbox;\n    } else {\n        this.tbox = rendererGraphs[0];\n    }\n    this.env = {}; //this is to allow shared vars among renderers\n}\n\n\n(function () {\n    var r2h = vocab.rdf2h;\n    var origLokup = Mustache.Context.prototype.lookup;\n    Mustache.Context.prototype.lookup = function (name) {\n        if (this.view instanceof RDF2h.Renderee) {\n            var rdf2h = this.view.rdf2h;\n            var graphNode = this.view.graphNode;\n            var graph = graphNode.graph;\n            var context = this.view.context;\n            function resolvePath(path) {\n                function resolveSubPath(node, pathSections) {\n                    function resolveSection(section) {\n                        if (section === \".\") {\n                            return node;\n                        } else {\n                            if (section.endsWith(\"<-\")) {\n                                return node.in(RDF2h.resolveCurie(section.substring(0, section.length - 2)));\n                            } else {\n                                if (section.startsWith(\"^\")) {\n                                    return node.in(RDF2h.resolveCurie(section.substring(1)));\n                                } else {\n                                    return node.out(RDF2h.resolveCurie(section));\n                                }\n                            }\n                        }\n                    }\n                    let subNode = resolveSection(pathSections[0]);\n                    if (pathSections.length === 1) {\n                        var resultNodes = subNode.nodes;\n                        if (resultNodes.length === 0) {\n                            //handling pseudo properties of literals\n                            if (node.nodes[0].language) {\n                                if (RDF2h.resolveCurie(pathSections[0]).equals(rdf.sym(\"http://purl.org/dc/terms/language\"))) {\n                                    return [rdf.literal(node.nodes[0].language)];\n                                }\n                            }\n                            if (node.nodes[0].datatype) {\n                                if (RDF2h.resolveCurie(pathSections[0]).equals(RDF2h.resolveCurie(\"rdf:type\"))) {\n                                    return [node.nodes[0].datatype];\n                                }\n                            }\n                        }\n                        return resultNodes;\n                    }\n                    return resolveSubPath(subNode,pathSections.slice(1))    \n                }\n                function splitPathSection(string) {\n                    let result = [];\n                    let readingURI = false;\n                    let lastCharLess = false;\n                    let section = \"\";\n                    function nextSection() {\n                        if (section.length > 0) {\n                            result.push(section);\n                            section = \"\";    \n                        }\n                    }\n                    for (var pos = 0; pos < string.length; pos++) {    \n                        let c = string[pos];\n                        if (lastCharLess) {\n                            if (c !== \"-\") {\n                                nextSection();\n                                readingURI = true;\n                            }\n                            section += \"<\";\n                            lastCharLess = false;\n                        }\n                        if (c === \"<\") {\n                            lastCharLess = true;\n                            continue;\n                        }\n                        if (readingURI && (c == \">\")) {\n                            section += c;\n                            nextSection();\n                            readingURI = false;\n                            continue;\n                        }\n                        if (!readingURI && (c == \"/\")) {\n                            nextSection();\n                            continue;\n                        }\n                        section += c;\n                    }\n                    nextSection();\n                    return result;\n                }\n                var pathSections = splitPathSection(path);// .split(\"/\").filter(function(e) { return e.length > 0})\n                return resolveSubPath(graphNode, pathSections);\n            }\n            if (name.startsWith(\"@prefix \")) {\n                var splits = name.split(\" \");\n                var prefixPart = splits[1];\n                var iriPart = splits[2];\n                var prefix = prefixPart.substring(0, prefixPart.length -1);\n                var iri = iriPart.substring(1, iriPart.length -1);\n                RDF2h.prefixMap[prefix] = iri;\n                return \"\";\n            }\n            if (name.startsWith(\":render \")) {\n                var splits = name.split(\" \");\n                var nodePath = splits[1];\n                var subContext = splits[2];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                var resolvedNodes = resolvePath(nodePath);\n                if (resolvedNodes.length > 1) {\n                    console.warn(\"Argument of render evaluates to more than one node!\")\n                }\n                if (resolvedNodes.length > 0) {\n                    return rdf2h.render(graph, resolvedNodes[0], subContext)\n                } else {\n                    return \"\";\n                }\n            }\n            if (name.startsWith(\":continue\")) {\n                var splits = name.split(\" \");\n                var subContext = splits[1];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                if (graphNode.nodes.length > 1) {\n                    console.warn(\":continue invoked in context with more than one node, this shouldn't be possible!\")\n                }\n                return rdf2h.render(graph, graphNode.nodes[0], subContext);\n\n            }\n            if (name.startsWith(\"+\")) {\n                name = name.substring(1);\n                return (resolvePath(name).length > 0);\n            }\n            var nodes = resolvePath(name);\n            if (nodes.length === 1) {\n                return new RDF2h.Renderee(rdf2h, GraphNode(nodes[0], graph), context);\n            } else {\n                return nodes.map(function (node) {\n                    return new RDF2h.Renderee(rdf2h, GraphNode(node, graph), context);\n                });\n            }\n            /*var node = this.view;\n             if (name === \".\") {\n             return node;\n             } else {\n             return \"not supported: \"+name;\n             }*/\n        } else {\n            return origLokup.call(this, name);\n        }\n    };\n})();\n\nRDF2h.Renderee = function (rdf2h, graphNode, context) {\n    if (!graphNode.nodes) {\n        throw new Error(\"second argument must be a GraphNode\");\n    }\n    if (graphNode.nodes.length !== 1) {\n        throw new Error(\"Renderee must be a single node\");\n    }\n    this.rdf2h = rdf2h;\n    this.graphNode = graphNode;\n    this.context = context;\n};\n\nRDF2h.Renderee.prototype.toString = function () {\n    if (this.graphNode.value) {\n        return this.graphNode.value;\n    }\n    return this.graphNode.toString();\n}\n\nRDF2h.prototype.getRenderer = function (renderee) {\n    var r2h = vocab.rdf2h;\n    let tbox = this.tbox;\n    function matchesContext(cfRenderer) {\n        var contexts = cfRenderer.out(r2h(\"context\")).nodes;\n        if (contexts.length === 0) {\n            console.debug(\"renderer \"+cfRenderer+\" specifies no context, thus accepting it for \"+renderee.context);\n            return true;\n        }\n        return contexts.some(function(context) {\n            if (renderee.context.equals(context)) {\n                console.debug(\"renderer \"+cfRenderer+\" matches the context \"+renderee.context);\n                return true;\n            }\n        });\n    }\n    function resolveRendererNode(rendererURI) {\n        if (!window) {\n            return \"Could not get renderer: \" + rendererURI + \", no window object.\"\n        }\n        var pageURIPrefix = window.location + \"#\";\n        if (!rendererURI.startsWith(pageURIPrefix)) {\n            return \"Could not get renderer: \" + rendererURI + \", the prefix must be \" + pageURIPrefix + \".\"\n        }\n        var id = rendererURI.substring(pageURIPrefix.length);\n        return document.getElementById(id).textContent;\n    }\n    function rendererRenderer(renderer) {\n        return function (renderee) {\n            return Mustache.render(renderer, renderee);\n        };\n    }\n    function getTypes(graphNode) {\n        //the array might contain rdfs:Resource twice (at the end)\n        if (graphNode.node.termType === \"Literal\") {\n            return [graphNode.node.datatype];\n        } else {\n            return graphNode.out(vocab.rdf(\"type\")).nodes.sort(\n                (a,b) => {\n                    if (a.equals(b)) {\n                        return 0;\n                    }\n                    if (a.equals(vocab.rdfs(\"Resource\"))) {\n                        return 1;\n                    }\n                    if (b.equals(vocab.rdfs(\"Resource\"))) {\n                        return -1;\n                    }\n                    if (tbox.match(a, vocab.rdfs(\"subClassOf\"),b).length === 0) {\n                        if (tbox.match(b, vocab.rdfs(\"subClassOf\"),a).length === 0) {\n                            return a.value.localeCompare(b.value);\n                        } else {\n                            return 1;\n                        }\n                    } else {\n                        return -1;\n                    }\n                }\n            ).concat([vocab.rdfs(\"Resource\")]);\n        }        \n    }\n    let self = this;\n    function getMatchingRenderer(types, context) {\n        function getMatching(renderers) {\n            return renderers.find(renderer => context.equals(renderer.out(vocab.rdf2h(\"context\")).node));\n        }\n        let reverseGraphs = self.rendererGraphs.reverse();\n        return types.reduce((renderer, type) => {\n            return renderer ? renderer : reverseGraphs.reduce((renderer, graph) => {\n                type =  GraphNode(type, graph);\n                return renderer ? renderer : getMatching(type.in(vocab.rdf2h(\"type\")).split());\n            }, null);\n        }, null);\n    }\n    let types = getTypes(renderee.graphNode);\n    let renderer = getMatchingRenderer(types, renderee.context);\n    if (!renderer) {\n        throw Error(\"No renderer found with context: <\"+renderee.context.value+\"> for any of the types \"+types.map(t => \"<\"+t.value+\">\").join()\n                    +\". The resource <\"+renderee.graphNode.value+\"> could thus not be rendered.\");\n    }\n    let mustache = renderer.out(vocab.rdf2h(\"mustache\"));\n    if (mustache.nodes.length > 0) {\n        return rendererRenderer(mustache.value);\n    }\n    let js = renderer.out(vocab.rdf2h(\"javaScript\"))\n    return function (renderee) {\n        try {\n            let render =  (n, context) => {\n                return renderee.rdf2h.render(n.graph, n.node, context ? context : renderee.context);\n            };\n            let output = \"\";\n            let print = (s) => {\n                output += s;\n            };\n            //Also printing return value for now\n            let returnValue = (new Function(\"n\", \"context\", \"$rdf\", \"render\", \"print\", \"GraphNode\", \"env\", js.value)\n                    )(renderee.graphNode, renderee.context, rdf, render, print, GraphNode, renderee.rdf2h.env);\n            if (returnValue) {\n                return output + returnValue;\n            } else {\n                return output;\n            }\n        } catch(err) {\n            err.message = err.message + \" in \" + js.value;\n            let stackLines = err.stack.split(\"\\n\");\n            let lineWithSelf = stackLines.findIndex(l => l.indexOf(\"RDF2h.render\") > 0);\n            err.stack = stackLines.splice(0, lineWithSelf - 1).join(\"\\n\");\n            throw err;\n        }\n    };\n\n\n}\n\nRDF2h.prototype.render = function (graph, node, context) {\n    if (!node.termType) {\n        node = rdf.sym(node);\n    }\n    if (!context) {\n        context = vocab.rdf2h(\"Default\");\n    }\n    //wrap all in one object that gets special care by lookup\n    var renderee = new RDF2h.Renderee(this, GraphNode(node, graph), context);\n    var renderer = this.getRenderer(renderee);\n    return renderer(renderee);\n}\n\nRDF2h.prefixMap = {};\nRDF2h.prefixMap[\"rdf\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\nRDF2h.prefixMap[\"rdfs\"] = \"http://www.w3.org/2000/01/rdf-schema#\";\nRDF2h.prefixMap[\"r2h\"] = \"http://rdf2h.github.io/2015/rdf2h#\";\nRDF2h.prefixMap[\"schema\"] = \"http://schema.org/\";\nRDF2h.prefixMap[\"rdf\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\nRDF2h.prefixMap[\"dct\"] = \"http://purl.org/dc/terms/\";\n\n\nRDF2h.resolveCurie = function (curie) {\n    if (curie.startsWith(\"<\") && curie.endsWith(\">\")) {\n        //URI, not a curie\n        return rdf.sym(curie.substring(1, curie.length - 1));\n    }\n    var splits = curie.split(\":\");\n    var prefix = splits[0];\n    var suffix = splits[1];\n    if (RDF2h.prefixMap[prefix]) {\n        return rdf.sym(RDF2h.prefixMap[prefix] + suffix);\n    } else {\n        return rdf.sym(curie);\n    }\n\n};\n\nif (typeof window !== 'undefined') {\n    window.RDF2h = RDF2h;\n}\n\nif (typeof module !== 'undefined') {\n    module.exports = RDF2h;\n}\n","module.exports = $;","var $ = require('jquery');\nvar rdf = require('ext-rdflib');\nvar RDF2h = require('rdf2h');\nvar GraphNode = require(\"rdfgraphnode-rdfext\");\n\n\nfunction LD2h() {\n}\n\n//LD2h.store = new LdpStore();\n\nfunction setHtmlContent(node, content) {\n    if (node[0].nodeName === \"HTML\") {\n        let tmp = document.createElement(\"html\");\n        tmp.innerHTML = content;\n        let  head = tmp.getElementsByTagName(\"head\")[0].innerHTML\n        let body = tmp.getElementsByTagName(\"body\")[0].innerHTML\n        node.find(\"head\").html(head);\n        node.find(\"body\").html(body);\n    } else {\n        node.html(content);\n    }\n}\n\nLD2h.expand = function() {\n    function canonicalize(url) {\n        //see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue/22918332#22918332\n        var div = document.createElement('div');\n        div.innerHTML = \"<a></a>\";\n        div.firstChild.href = url; // Ensures that the href is properly escaped\n        div.innerHTML = div.innerHTML; // Run the current innerHTML back through the parser\n        return div.firstChild.href;\n    }\n    return LD2h.getRenderersGraph().then(function (renderers) {\n        return LD2h.getDataGraph().then(function (localData) {       \n            function expandWithRenderers() {\n                var resultPromises = new Array();\n                //Rendering with local RDF\n                var elems = $(\".render\");\n                elems.removeClass(\"render\");\n                for (var i = 0; i < elems.length; i++) {\n                    var elem = $(elems[i]);\n                    var context = elem.attr(\"context\");\n                    if (context) {\n                        context = RDF2h.resolveCurie(context);\n                    }\n                    var relativeURI = elem.attr(\"resource\");\n                    if (typeof relativeURI !== 'undefined') {\n                        var uri = canonicalize(relativeURI);\n                        var rendered = new RDF2h(renderers).render(localData, rdf.sym(uri), context);\n                        setHtmlContent(elem, rendered);\n                        resultPromises.push(expandWithRenderers());\n                    } else {\n                        console.warn(\"Element of class render without resource attribute cannot be rendered.\", elem);\n                    }\n                }\n                //Remote resources\n                var elems = $(\".fetch\");\n                elems.removeClass(\"fetch\");\n                var currentElem = 0;\n                function processsNextElem() {\n                    if (currentElem >= elems.length) {\n                        return;\n                    }\n                    var elem = $(elems[currentElem++]);\n                    var context = elem.attr(\"context\");\n                    if (context) {\n                        context = RDF2h.resolveCurie(context);\n                    }\n                    var relativeURI = elem.attr(\"resource\");\n                    if (typeof relativeURI !== 'undefined') {\n                        var uri = canonicalize(relativeURI);\n                        var relativeGraphURI = elem.attr(\"graph\");\n                        var graphUri;\n                        if (typeof relativeGraphURI !== 'undefined') {\n                            graphUri = canonicalize(relativeGraphURI);\n                        } else {\n                            graphUri = uri.split(\"#\")[0];\n                        }\n                        GraphNode.rdfFetch(graphUri).catch(function(error) {\n                                        console.warn(\"Error retrieving \"+graphUri+\": \"+error);\n                                    }).then(function(response) {\n                                        return response.graph().then(\n                                            data =>  {\n                                                console.log(\"Got graph of size \"+data.length+\" from \"+graphUri);\n                                                var rendered = new RDF2h(renderers).render(data, rdf.sym(uri), context);\n                                                setHtmlContent(elem, rendered);\n                                                return expandWithRenderers();\n                                            }\n                                        );\n                                }).catch(function(error) {\n                                    console.warn(\"Error rendering \"+graphUri+\": \"+error);\n                                    if (error.stack) {\n                                        console.warn(error.stack);\n                                    }\n                                });\n                    } else {\n                        console.warn(\"Element of class fetch without resource attribute cannot be rendered.\", elem);\n                    }\n                    processsNextElem();\n                }\n                processsNextElem();\n                return Promise.all(resultPromises);\n            }\n            return expandWithRenderers();     \n        });\n    });\n       \n}\n\nLD2h.getDataGraph = function() {\n    return new Promise(function(resolve, reject) {\n        var dataElem  = $(\"#data\")\n        var serializedRDF = dataElem.text();\n        var serializationFormat = dataElem.attr(\"type\");\n        var data = rdf.graph();\n        rdf.parse(serializedRDF, data, window.location.toString().split('#')[0], serializationFormat, (err, result) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n};\n\nLD2h.getRenderersGraph = function () {\n    return new Promise(function(resolve, reject) {\n        function parse(serializedRDF, serializationFormat) {\n            var graph = rdf.graph();\n            if (!serializationFormat) {\n                serializationFormat = 'text/turtle';\n            }\n            rdf.parse(serializedRDF, graph, window.location.toString().split('#')[0], serializationFormat, () => resolve(graph));\n        }\n        var renderersElem = $(\"#renderers\");\n        if (renderersElem[0]) {\n            if (renderersElem.attr(\"src\")) {\n                console.warn(\"Using script element with src causes is not recommended, use <link rel=\\\"renderers\\\" instead\");\n                $.get(renderersElem.attr(\"src\"), function (renderersTtl) {\n                    parse(renderersTtl);\n                });\n            } else {\n                var serializedRDF = renderersElem.text();\n                parse(serializedRDF, renderersElem.attr(\"type\"));\n            }\n        } else {\n            var rendererLinks = $(\"link[rel='renderers']\");\n            if (rendererLinks.length > 0) {\n\n                let graphPromises = new Array();\n                for (var iteration = 0; iteration < rendererLinks.length; iteration++) {\n                    var href = rendererLinks[iteration].href.split('#')[0];\n                    graphPromises.push(GraphNode.rdfFetch(href).then(r => r.graph()));\n                }\n\n                resolve(Promise.all(graphPromises));\n                \n            } else {\n                console.warn(\"No renderers could be found, specify a script element with \\n\\\n                id renderers or link headers of type renderers\");\n            }\n        }\n    });\n};\n\nif (typeof window !== 'undefined') {\n    window.LD2h = LD2h;\n}\nif (typeof module !== 'undefined') {\n    module.exports = LD2h;\n}"],"sourceRoot":""}